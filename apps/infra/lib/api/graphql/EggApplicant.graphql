## AUTHENTICATE
type EggApplicant @aws_cognito_user_pools {
  id: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  deletedAt: AWSDateTime
  remarks: String
  eggCollectionTime: Int!
  eggCollectionPlanDate: AWSDateTime!
  status: EggApplicantStatus!
  identityPaperType: IdentityPaperType!
  identityPaperFront: String!
  identityPaperBack: String
  eggCollectionTimes: [EggCollectionTime!]
  isLast: Boolean!
  appliedBy: User
  clinic: AffiliatedClinic
  eggCollectionReport: EggCollectionReport
  eggKitTransportation: EggKitTransportation
  stockInfos: [StockInfo!]
  billings(
    where: BillingWhereInput
    orderBy: [BillingOrderByInput!]
    skip: Int
    take: Int
  ): [Billing!] @aws_cognito_user_pools(cognito_groups: ["ADMIN", "USER"])
  subscription: PaymentSubscription
}

## AUTHENTICATE
## ROLE: USER, CLINIC
type EggCollectionTimes
  @aws_cognito_user_pools(cognito_groups: ["USER", "CLINIC"]) {
  eggCollectionTimes: [EggCollectionTime!]
  totalCount: Int!
}

## AUTHENTICATE
## ROLE: USER, CLINIC
type ClinicByEggCollectionTime
  @aws_cognito_user_pools(cognito_groups: ["USER", "CLINIC"]) {
  id: String!
  clinicName: String!
}

## AUTHENTICATE
## ROLE: USER, CLINIC
type EggCollectionTime
  @aws_cognito_user_pools(cognito_groups: ["USER", "CLINIC"]) {
  id: String!
  status: EggApplicantStatus
  eggCollectionTime: Int!
  clinic: ClinicByEggCollectionTime
}

input EggCollectionTimeWhereInput {
  userId: String
  status: EggApplicantStatus
}

input EggApplicantWhereUniqueInput {
  id: String
}

input CreateEggApplicantInput {
  clinicId: String!
  eggCollectionPlanDate: AWSDate!
  identityPaperType: IdentityPaperType!
  identityPaperFront: String!
  identityPaperBack: String
}

input UpdateEggApplicantInput {
  eggCollectionTime: Int!
  clinicId: String!
  eggCollectionPlanDate: AWSDate!
}

## AUTHENTICATE
type EggApplicantEdge @aws_cognito_user_pools {
  node: EggApplicant!
  cursor: String!
}

## AUTHENTICATE
type EggApplicantConnection @aws_cognito_user_pools {
  pageInfo: PageInfo!
  edges: [EggApplicantEdge!]!
  totalCount: Int!
}

extend type Query {
  ## AUTHENTICATE
  getEggApplicants(
    where: EggApplicantWhereInput
    orderBy: [EggApplicantOrderByInput!]
    skip: Int
    take: Int
    cursor: EggApplicantWhereUniqueInput
  ): EggApplicantConnection! @aws_cognito_user_pools
  ## AUTHENTICATE
  getEggApplicant(where: EggApplicantWhereUniqueInput!): EggApplicant!
    @aws_cognito_user_pools
  ## AUTHENTICATE
  ## ROLE: USER, CLINIC
  getEggCollectionTimes(
    where: EggCollectionTimeWhereInput
  ): EggCollectionTimes!
    @aws_cognito_user_pools(cognito_groups: ["USER", "CLINIC", "ADMIN"])
  ## AUTHENTICATE
  ## ROLE: USER
  getEggApplicantOnProcess: EggApplicant
    @aws_cognito_user_pools(cognito_groups: ["USER"])
}

type Mutation {
  ## AUTHENTICATE
  ## ROLE: USER
  createEggApplicant(
    createEggApplicantInput: CreateEggApplicantInput!
  ): String! @aws_cognito_user_pools(cognito_groups: ["USER"])
  ## AUTHENTICATE
  ## ROLE: USER, CLINIC
  updateEggApplicant(
    updateEggApplicantInput: UpdateEggApplicantInput!
  ): EggApplicant!
    @aws_cognito_user_pools(cognito_groups: ["USER", "CLINIC"])
    @deprecated(reason: "Not used")
}
