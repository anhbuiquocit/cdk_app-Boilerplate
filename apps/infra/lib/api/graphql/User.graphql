## AUTHENTICATE
type User @aws_cognito_user_pools {
  id: String!
  email: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  deletedAt: AWSDateTime
  lastName: String!
  firstName: String!
  lastNameKana: String!
  firstNameKana: String!
  fullName: String!
  fullNameKana: String!
  phoneNumber: String
  initialPhoneNumber: String
  birthday: AWSDateTime
  temporarySignUpDate: AWSDateTime
  permanentSignUpDate: AWSDateTime
  workCompany: String
  memberShipNumber: String
  systemToUseType: CouponType
  welfareUserCode: String
  postalCodeServiceCompany: String
  otherDiscountServices: String
  billPlan: BillPlan
  currentPostalCode: String
  currentAddress1: String
  currentAddress2: String
  currentAddress3: String
  currentBuildingName: String
  deliveryPostalCode: String
  deliveryAddress1: String
  deliveryAddress2: String
  deliveryAddress3: String
  deliveryBuildingName: String
  addressReceiveEmailType: AddressReceiveEmailType!
  isSubscribeNewsletter: Boolean!
  isBenefit: Boolean
  identityPaperBack: String
  identityPaperFront: String
  identityPaperType: IdentityPaperType!
  otherPostCode: String
  otherAddress1: String
  otherAddress2: String
  otherAddress3: String
  otherCouponCode: String
  otherBuildingName: String
  status: UserStatus
  signDocumentDate: AWSDateTime
  scheduledClinicId: String
  scheduledClinic: AffiliatedClinic
  eggApplicantContractUrl: String
  eggApplicantContractStatus: EggApplicantContractStatus
  isDeleveryAddress: Boolean
  otherCompany: String
  preSignedEggApplicantContract: String
    @deprecated(
      reason: "use eggApplicantContractUrl and eggApplicantContractStatus"
    )
  signedEggApplicantContract: String
    @deprecated(
      reason: "use eggApplicantContractUrl and eggApplicantContractStatus"
    )
  lastSignedEggApplicantContract: String
  isEggCollected: Boolean
  accountId: String!
  ## AUTHENTICATE
  ## ROLE: ADMIN, USER
  account: Account! @aws_cognito_user_pools(cognito_groups: ["ADMIN", "USER"])
  ## AUTHENTICATE
  ## ROLE: ADMIN, USER
  eggApplicants(
    where: EggApplicantWhereInput
    orderBy: [EggApplicantOrderByInput!]
    skip: Int
    take: Int
  ): [EggApplicant!] @aws_cognito_user_pools(cognito_groups: ["ADMIN", "USER"])
  ## AUTHENTICATE
  ## ROLE: ADMIN, USER
  lastEggApplicant: EggApplicant
  ## AUTHENTICATE
  ## ROLE: ADMIN, USER
  userOldInfos(
    where: UserOldInfoWhereInput
    orderBy: [UserOldInfoOrderByInput!]
    skip: Int
    take: Int
  ): [UserOldInfo!] @aws_cognito_user_pools(cognito_groups: ["ADMIN", "USER"])
  ## AUTHENTICATE
  ## ROLE: ADMIN, USER
  documents(
    where: DocumentWhereInput
    orderBy: [DocumentOrderByInput!]
    skip: Int
    take: Int
  ): [Document!] @aws_cognito_user_pools(cognito_groups: ["ADMIN", "USER"])

  ## AUTHENTICATE
  ## ROLE: USER, ADMIN
  billings(
    where: BillingWhereInput
    orderBy: [BillingOrderByInput!]
    skip: Int
    take: Int
  ): [Billing!] @aws_cognito_user_pools(cognito_groups: ["ADMIN", "USER"])
  couponId: String
  coupon: Coupon
  files: [File!] @aws_cognito_user_pools(cognito_groups: ["ADMIN", "USER"])
}

type UserPublic @aws_cognito_user_pools @aws_api_key {
  id: String!
  email: AWSEmail!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  deletedAt: AWSDateTime
  lastName: String!
  firstName: String!
  lastNameKana: String!
  firstNameKana: String!
  fullName: String!
  fullNameKana: String!
  phoneNumber: String
  birthday: AWSDateTime
  couponId: String
}

input UserInput {
  username: String
  email: AWSEmail
  phoneNumber: String
  password: String
  lastname: String
  lastnameKana: String
  firstname: String
  firstnameKana: String
  birthday: AWSDate
  gender: String
  workCompany: String
  systemToUseType: CouponType
  postalCode: String
  address1: String
  address2: String
  address3: String
  currentPostalCode: String
  currentAddress1: String
  currentAddress2: String
  currentAddress3: String
  currentBuildingName: String
  deliveryPostalCode: String
  deliveryAddress1: String
  deliveryAddress2: String
  deliveryAddress3: String
  deliveryBuildingName: String
  isSubscribeNewsletter: Boolean
  isTemporaryRegister: Boolean
  identityPaperType: IdentityPaperType
  identityPaperFront: String
  identityPaperBack: String
  scheduledClinicId: String
  couponId: String
  addressReceiveEmailType: AddressReceiveEmailType
}

input PermanentRegisterInput {
  email: AWSEmail!
  birthday: AWSDate!
  firstName: String!
  firstNameKana: String!
  gender: String!
  identityPaperBack: String
  identityPaperFront: String
  identityPaperType: IdentityPaperType!
  isSubscribeNewsletter: Boolean!
  isTemporaryRegister: Boolean!
  systemToUseType: CouponType
  lastName: String!
  lastNameKana: String!
  workCompany: String
  phoneNumber: String!
  currentPostalCode: String!
  currentAddress1: String!
  currentAddress2: String!
  currentAddress3: String!
  currentBuildingName: String!
  deliveryPostalCode: String!
  deliveryAddress1: String!
  deliveryAddress2: String!
  deliveryAddress3: String
  deliveryBuildingName: String
  password: String!
  otherWelfareCompany: String
  otherCompany: String
  otherCouponCode: String
  welfareUserCode: String
  isBenefit: Boolean!
  otherPostCode: String
  otherAddress1: String
  otherAddress2: String
  otherAddress3: String
  otherBuildingName: String
  scheduledClinicId: String!
  isDeleveryAddress: Boolean
  couponId: String
  addressReceiveEmailType: AddressReceiveEmailType
}

input UserUpdateData {
  birthday: AWSDate
  firstName: String
  firstNameKana: String
  gender: String
  identityPaperBack: String
  identityPaperFront: String
  identityPaperType: IdentityPaperType
  isSubscribeNewsletter: Boolean
  isTemporaryRegister: Boolean
  systemToUseType: CouponType
  lastName: String
  lastNameKana: String
  workCompany: String
  phoneNumber: String
  currentPostalCode: String
  currentAddress1: String
  currentAddress2: String
  currentAddress3: String
  currentBuildingName: String
  deliveryPostalCode: String
  deliveryAddress1: String
  deliveryAddress2: String
  deliveryAddress3: String
  deliveryBuildingName: String
  password: String
  otherWelfareCompany: String
  otherCompany: String
  otherCouponCode: String
  welfareUserCode: String
  isBenefit: Boolean
  otherPostCode: String
  otherAddress1: String
  otherAddress2: String
  otherAddress3: String
  otherBuildingName: String
  scheduledClinicId: String
  addressReceiveEmailType: AddressReceiveEmailType
  newEmail: String
  isDeleveryAddress: Boolean
  couponId: String
}

input AdminUpdateUserInfoInput {
  userId: String!
  birthday: AWSDate
  firstName: String
  firstNameKana: String
  gender: String
  identityPaperBack: String
  identityPaperFront: String
  identityPaperType: IdentityPaperType
  isSubscribeNewsletter: Boolean
  isTemporaryRegister: Boolean
  systemToUseType: CouponType
  lastName: String
  lastNameKana: String
  workCompany: String
  phoneNumber: String
  currentPostalCode: String
  currentAddress1: String
  currentAddress2: String
  currentAddress3: String
  currentBuildingName: String
  deliveryPostalCode: String
  deliveryAddress1: String
  deliveryAddress2: String
  deliveryAddress3: String
  deliveryBuildingName: String
  otherWelfareCompany: String
  otherCompany: String
  otherCouponCode: String
  welfareUserCode: String
  isBenefit: Boolean
  otherPostCode: String
  otherAddress1: String
  otherAddress2: String
  otherAddress3: String
  otherBuildingName: String
  scheduledClinicId: String
  addressReceiveEmailType: AddressReceiveEmailType
  newEmail: String
  isDeleveryAddress: Boolean
  couponId: String
}

type AccountInfoOutput {
  accountName: String
  lastName: String
  firstName: String
  lastNameKana: String
  firstNameKana: String
  clinicName: String
  couponId: String
}

input UserWhereUniqueInput {
  id: String
  accountId: String
  phoneNumber: String
}

##AUTHENTICATE
type UserEdge @aws_cognito_user_pools {
  node: User!
  cursor: String!
}

input UserTerminateContractInput {
  terminateContractType: TerminateContractType!
  ## require with CONSENT_FOR_DISPOSAL terminateContractType
  isAgreeConsentForDisposal: Boolean
  ## require with CONSENT_FOR_DISPOSAL terminateContractType
  isUseForPrivatePurpose: Boolean
  reasonType: ReasonType!
}

enum TerminateContractType {
  CONSENT_FOR_DISPOSAL
  HOPE_TO_TRANSFER
}

enum ReasonType {
  BALANCE_WITH_STORAGE_COSTS
  PREGNANT_OR_HAVE_A_CHILD
  OTHER
}

enum UserDeleteAccountReasonType {
  EGG_COLLECTION_COST
  STORAGE_COST
  TIMING_ISSUES
  CONVENIENCE_OF_WORK
  ANXIETY_ABOUT_EGG_COLLECTION
  ANXIETY_ABOUT_THE_STORAGE_SYSTEM
  COMPARE_AT_MULTIPLE_CLINICS
  GOT_A_PARTNER
  OTHERS
}

##AUTHENTICATE
type UserConnection @aws_cognito_user_pools {
  pageInfo: PageInfo!
  edges: [UserEdge!]!
  totalCount: Int!
}

extend type Mutation {
  ##registerUser(data: UserInput): Boolean! @aws_cognito_user_pools
  ## changePassword(oldPassword: String!, newPassword: String!): Boolean!
  ##   @aws_cognito_user_pools
  permanentRegister(data: PermanentRegisterInput!): Boolean!
  ## NOT AUTHENTICATE
  createPresignURL(fileName: String!): String!
    @aws_cognito_user_pools
    @aws_api_key
  createPresignURLWithFolder(fileName: String!, folderName: String!): String!
  ## NOT AUTHENTICATE
  forgotPassword(email: String!): Boolean!
  ## NOT AUTHENTICATE
  resetPassword(email: String!, newPassword: String!): Boolean!
  ## AUTHENTICATE
  ## ROLE: USER
  ## RETURN: InquiryId
  userTerminateContract(
    userTerminateContractInput: UserTerminateContractInput!
  ): String! @aws_cognito_user_pools(cognito_groups: ["USER"])
  ## AUTHENTICATE
  ## ROLE: USER
  updateUserInfor(data: UserUpdateData!): Boolean!
    @aws_cognito_user_pools(cognito_groups: ["USER"])
  ## AUTHENTICATE
  ## ROLE: ADMIN
  adminUpdateUserInfo(data: AdminUpdateUserInfoInput!): Boolean!
    @aws_cognito_user_pools(cognito_groups: ["ADMIN"])
  ## AUTHENTICATE
  ## ROLE: USER
  ## RETURN: InquiryId
  userDeleteAccount(reasonType: UserDeleteAccountReasonType!): String!
    @aws_cognito_user_pools(cognito_groups: ["USER"])

  userUpdateEmail(token: String!): Boolean!
    @aws_cognito_user_pools(cognito_groups: ["USER"])
    @aws_api_key
  userCheckTokenUpdateMailIsValid(token: String!): Boolean!
    @aws_cognito_user_pools
    @aws_api_key
}

extend type Query {
  getAccountInfo(email: String!): AccountInfoOutput
  ##AUTHENTICATE
  ##ROLE: ADMIN
  ##ERROR: NOT_FOUND, UNAUTHORIZED
  getUsers(
    where: UserWhereInput
    orderBy: [UserOrderByInput!]
    skip: Int
    take: Int
    cursor: UserWhereUniqueInput
  ): UserConnection! @aws_cognito_user_pools(cognito_groups: ["ADMIN"])
  ##AUTHENTICATE
  ##ROLE: ADMIN
  ##ERROR: NOT_FOUND, UNAUTHORIZED
  getUser(where: UserWhereUniqueInput!): User!
    @aws_cognito_user_pools(cognito_groups: ["ADMIN"])
  downloadFileFromS3(key: String!): String! @aws_cognito_user_pools @aws_api_key
}
