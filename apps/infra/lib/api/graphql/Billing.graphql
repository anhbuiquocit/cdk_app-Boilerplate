## AUTHENTICATE
## ROLE: USER, ADMIN
type Billing @aws_cognito_user_pools(cognito_groups: ["USER", "ADMIN"]) {
  id: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  deletedAt: AWSDateTime
  total: Float!
  amount: Float
  discount: Float
  billingDate: AWSDateTime
  paidDate: AWSDateTime
  lastBillingDate: AWSDateTime
  status: BillingStatus!
  eggApplicantId: String!
  eggApplicant: EggApplicant
  appliedById: String!
  appliedBy: User
  eggTransportRequestId: String
  eggTransportRequest: EggTransportRequest
  transactions(
    where: PaymentTransactionWhereInput
    orderBy: [PaymentTransactionOrderByInput!]
    skip: Int
    take: Int
  ): [PaymentTransaction!]
    @aws_cognito_user_pools(cognito_groups: ["USER", "ADMIN"])
  billingItems: [BillingItem!]
  kenQuantity: Int
  pretaxAmount: Float
  tax: Float
}

type BillingItem @aws_cognito_user_pools(cognito_groups: ["USER", "ADMIN"]) {
  id: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  deletedAt: AWSDateTime
  billingId: String!
  billing: Billing!
  billingType: BillingType
  total: Float!
  amount: Float!
  discount: Float!
  kenQuantity: Int
  kenPrice: Float
  couponId: String
  coupon: Coupon
  pretaxAmount: Float
  tax: Float
  description: String
}

type BillingEarnings @aws_cognito_user_pools(cognito_groups: ["ADMIN"]) {
  totalCases: Int
  countPeoPle: Int
  totalEarning: Float
}

input UserGetNextBillingInput {
  eggApplicantId: String
}

input UserCreateEggApplicantBillingInput {
  eggApplicantId: String!
  billPlan: BillPlan!
}

input AdminUpdateStatusBillingInPut {
  id: String!
  status: BillingStatus!
}

input BillingWhereUniqueInput {
  id: String
}

## AUTHENTICATE
## ROLE: USER, ADMIN
type BillingEdge @aws_cognito_user_pools(cognito_groups: ["USER", "ADMIN"]) {
  node: Billing!
  cursor: String!
}

## AUTHENTICATE
## ROLE: USER, ADMIN
type BillingItemEdge
  @aws_cognito_user_pools(cognito_groups: ["USER", "ADMIN"]) {
  node: BillingItem!
  cursor: String!
}

## AUTHENTICATE
## ROLE: USER, ADMIN
type BillingConnection
  @aws_cognito_user_pools(cognito_groups: ["USER", "ADMIN"]) {
  pageInfo: PageInfo!
  edges: [BillingEdge!]!
  totalCount: Int!
}

## AUTHENTICATE
## ROLE: USER, ADMIN
type BillingItemConnection
  @aws_cognito_user_pools(cognito_groups: ["USER", "ADMIN"]) {
  pageInfo: PageInfo!
  edges: [BillingItemEdge!]!
  totalCount: Int!
}

extend type Query {
  ## AUTHENTICATE
  ## ROLE: USER, ADMIN
  getBillings(
    where: BillingWhereInput
    orderBy: [BillingOrderByInput!]
    skip: Int
    take: Int
    cursor: BillingWhereUniqueInput
  ): BillingConnection!
    @aws_cognito_user_pools(cognito_groups: ["USER", "ADMIN"])
  ## AUTHENTICATE
  ## ROLE: USER, ADMIN
  getBilling(where: BillingWhereUniqueInput!): Billing!
    @aws_cognito_user_pools(cognito_groups: ["USER", "ADMIN"])
  ## AUTHENTICATE
  ## ROLE: USER, ADMIN
  getUserNextBilling(where: UserGetNextBillingInput): Billing!
    @aws_cognito_user_pools(cognito_groups: ["USER"])
  ## AUTHENTICATE
  ## ROLE: ADMIN
  getBillingEarnings(where: BillingWhereInput): BillingEarnings!
    @aws_cognito_user_pools(cognito_groups: ["ADMIN"])
  ## AUTHENTICATE
  ## ROLE: USER, ADMIN
  getBillingItems(
    where: BillingItemWhereInput
    orderBy: [BillingItemOrderByInput!]
    skip: Int
    take: Int
    cursor: BillingWhereUniqueInput
  ): BillingItemConnection!
    @aws_cognito_user_pools(cognito_groups: ["USER", "ADMIN"])
}

extend type Mutation {
  ## AUTHENTICATE
  ## ROLE: USER
  userCreateEggApplicantBilling(
    userCreateEggApplicantBillingInput: UserCreateEggApplicantBillingInput!
  ): String! @aws_cognito_user_pools(cognito_groups: ["USER"])
  adminUpdateStatusBilling(
    adminUpdateStatusBillingInPut: AdminUpdateStatusBillingInPut!
  ): BillingStatus! @aws_cognito_user_pools(cognito_groups: ["ADMIN"])
  userRepurchaseBilling(
    userCreateEggApplicantBillingInput: UserCreateEggApplicantBillingInput!
  ): String! @aws_cognito_user_pools(cognito_groups: ["USER"])
}
